/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2015 Kurento (http://kurento.org/)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var inherits = require('inherits');

var kurentoClient = require('kurento-client');

var disguise = kurentoClient.disguise;

var checkType      = kurentoClient.checkType;
var ChecktypeError = checkType.ChecktypeError;


var Transaction = kurentoClient.TransactionsManager.Transaction;

var OpenCVFilter = kurentoClient.register.abstracts.OpenCVFilter;


function noop(error, result) {
  if (error) console.trace(error);

  return result
};


/**
 * Create a :rom:cls:`FaceSegmentator`
 *
 * @classdesc
 *  Filter that detects the face characteristics and throws events with the main
 *
 * @extends module:filters/abstracts.OpenCVFilter
 *
 * @constructor module:facesegmentator.FaceSegmentatorFilter
 *
 * @fires {@link module:facesegmentator#event:EyesPosition EyesPosition}
 * @fires {@link module:facesegmentator#event:FacePosition FacePosition}
 * @fires {@link module:facesegmentator#event:MouthPosition MouthPosition}
 * @fires {@link module:facesegmentator#event:NoisePosition NoisePosition}
 */
function FaceSegmentatorFilter(){
  FaceSegmentatorFilter.super_.call(this);
};
inherits(FaceSegmentatorFilter, OpenCVFilter);


//
// Public properties
//

/**
 * Time (in milliseconds) between two consecutive events
 *
 * @alias module:facesegmentator.FaceSegmentatorFilter#getIntervalEventTime
 *
 * @param {module:facesegmentator.FaceSegmentatorFilter~getIntervalEventTimeCallback} [callback]
 *
 * @return {external:Promise}
 */
FaceSegmentatorFilter.prototype.getIntervalEventTime = function(callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  if(!arguments.length) callback = undefined;

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'getIntervalEventTime', callback), this)
};
/**
 * @callback module:facesegmentator.FaceSegmentatorFilter~getIntervalEventTimeCallback
 * @param {external:Error} error
 * @param {external:Integer} result
 */

/**
 * Time (in milliseconds) between two consecutive events
 *
 * @alias module:facesegmentator.FaceSegmentatorFilter#setIntervalEventTime
 *
 * @param {external:Integer} intervalEventTime
 * @param {module:facesegmentator.FaceSegmentatorFilter~setIntervalEventTimeCallback} [callback]
 *
 * @return {external:Promise}
 */
FaceSegmentatorFilter.prototype.setIntervalEventTime = function(intervalEventTime, callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  checkType('int', 'intervalEventTime', intervalEventTime, {required: true});

  var params = {
    intervalEventTime: intervalEventTime
  };

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'setIntervalEventTime', params, callback), this)
};
/**
 * @callback module:facesegmentator.FaceSegmentatorFilter~setIntervalEventTimeCallback
 * @param {external:Error} error
 */


/**
 * @alias module:facesegmentator.FaceSegmentatorFilter.constructorParams
 *
 * @property {module:core.MediaPipeline} mediaPipeline
 *  the {@link module:core.MediaPipeline MediaPipeline} to which the filter 
 *  belongs
 */
FaceSegmentatorFilter.constructorParams = {
  mediaPipeline: {
    type: 'kurento.MediaPipeline',
    required: true
  }
};

/**
 * @alias module:facesegmentator.FaceSegmentatorFilter.events
 *
 * @extends module:filters/abstracts.OpenCVFilter.events
 */
FaceSegmentatorFilter.events = OpenCVFilter.events.concat(['EyesPosition', 'FacePosition', 'MouthPosition', 'NoisePosition']);


/**
 * Checker for {@link module:facesegmentator.FaceSegmentatorFilter}
 *
 * @memberof module:facesegmentator
 *
 * @param {external:String} key
 * @param {module:facesegmentator.FaceSegmentatorFilter} value
 */
function checkFaceSegmentatorFilter(key, value)
{
  if(!(value instanceof FaceSegmentatorFilter))
    throw ChecktypeError(key, FaceSegmentatorFilter, value);
};


module.exports = FaceSegmentatorFilter;

FaceSegmentatorFilter.check = checkFaceSegmentatorFilter;
