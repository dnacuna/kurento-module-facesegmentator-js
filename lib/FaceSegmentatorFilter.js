/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2015 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 */

var inherits = require('inherits');

var kurentoClient = require('kurento-client');

var ChecktypeError = kurentoClient.checkType.ChecktypeError;

var Transaction = kurentoClient.TransactionsManager.Transaction;

var OpenCVFilter = kurentoClient.register.abstracts.OpenCVFilter;


function noop(error) {
  if (error) console.trace(error);
};


/**
 * Create a :rom:cls:`FaceSegmentator`
 *
 * @classdesc
 *  Filter that detects the face characteristics and throws events with the main
 *
 * @extends module:filters/abstracts.OpenCVFilter
 *
 * @constructor module:facesegmentator.FaceSegmentatorFilter
 *
 * @fires {@link module:facesegmentator#event:EyesPosition EyesPosition}
 * @fires {@link module:facesegmentator#event:FacePosition FacePosition}
 * @fires {@link module:facesegmentator#event:MouthPosition MouthPosition}
 * @fires {@link module:facesegmentator#event:NoisePosition NoisePosition}
 */
function FaceSegmentatorFilter(){
  FaceSegmentatorFilter.super_.call(this);
};
inherits(FaceSegmentatorFilter, OpenCVFilter);


//
// Public properties
//

/**
 * Time (in milliseconds) between two consecutive events
 *
 * @alias module:facesegmentator.FaceSegmentatorFilter#getIntervalEventTime
 *
 * @param {module:facesegmentator.FaceSegmentatorFilter~getIntervalEventTimeCallback} [callback]
 *
 * @return {external:Promise}
 */
FaceSegmentatorFilter.prototype.getIntervalEventTime = function(callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  if(!arguments.length) callback = undefined;

  callback = (callback || noop).bind(this)

  return this._invoke(transaction, 'getIntervalEventTime', callback);
};
/**
 * @callback module:facesegmentator.FaceSegmentatorFilter~getIntervalEventTimeCallback
 * @param {external:Error} error
 * @param {external:Integer} result
 */

/**
 * Time (in milliseconds) between two consecutive events
 *
 * @alias module:facesegmentator.FaceSegmentatorFilter#setIntervalEventTime
 *
 * @param {external:Integer} intervalEventTime
 * @param {module:facesegmentator.FaceSegmentatorFilter~setIntervalEventTimeCallback} [callback]
 *
 * @return {external:Promise}
 */
FaceSegmentatorFilter.prototype.setIntervalEventTime = function(intervalEventTime, callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  checkType('int', 'intervalEventTime', intervalEventTime, {required: true});

  var params = {
    intervalEventTime: intervalEventTime,
  };

  return this._invoke(transaction, 'setIntervalEventTime', params, callback);
};
/**
 * @callback module:facesegmentator.FaceSegmentatorFilter~setIntervalEventTimeCallback
 * @param {external:Error} error
 */


/**
 * @alias module:facesegmentator.FaceSegmentatorFilter.constructorParams
 *
 * @property {module:core.MediaPipeline} mediaPipeline
 *  the {@link module:core.MediaPipeline MediaPipeline} to which the filter 
 *  belongs
 */
FaceSegmentatorFilter.constructorParams = {
  mediaPipeline: {
    type: 'MediaPipeline',
    required: true
  },
};

/**
 * @alias module:facesegmentator.FaceSegmentatorFilter.events
 *
 * @extends module:filters/abstracts.OpenCVFilter.events
 */
FaceSegmentatorFilter.events = OpenCVFilter.events.concat(['EyesPosition', 'FacePosition', 'MouthPosition', 'NoisePosition']);


/**
 * Checker for {@link facesegmentator.FaceSegmentatorFilter}
 *
 * @memberof module:facesegmentator
 *
 * @param {external:String} key
 * @param {module:facesegmentator.FaceSegmentatorFilter} value
 */
function checkFaceSegmentatorFilter(key, value)
{
  if(!(value instanceof FaceSegmentatorFilter))
    throw ChecktypeError(key, FaceSegmentatorFilter, value);
};


module.exports = FaceSegmentatorFilter;

FaceSegmentatorFilter.check = checkFaceSegmentatorFilter;
